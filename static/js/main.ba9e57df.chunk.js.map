{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/NavScore/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","href","title","target","rel","NavScore","score","highScore","ImageCard","id","src","image","alt","name","onClick","handleClick","App","state","images","clickedImages","event","preventDefault","clickedId","_this","includes","resetGame","console","log","setState","prevState","concat","Object","toConsumableArray","updateScore","_this2","this","i","length","j","Math","floor","random","_ref","shuffleImages","components_NavScore","components_Title","components_Wrapper","map","components_ImageCard","key","source","clicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba9e57df.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <div className=\"title\">\r\n            <div className=\"jumbotron bg\">\r\n                <h1 className=\"display-4\">Welcome to Clicky Game!</h1>\r\n                <h3>To play, click as many images as possible- but don't click any twice!</h3>\r\n                <p>\r\n                * Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\" target=\"_blank\" rel=\"noopener noreferrer\">Freepik </a>from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\" target=\"_blank\" rel=\"noopener noreferrer\">www.flaticon.com </a>and licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" target=\"_blank\" rel=\"noopener noreferrer\">CC 3.0 BY </a>\r\n                * Background pattern by Michal from <a href=\"https://www.toptal.com/designers/subtlepatterns/\" title=\"Subtle Patterns\" target=\"_blank\" rel=\"noopener noreferrer\">Subtle Patterns</a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavScore(props) {\r\n    return (\r\n        <ul className=\"nav fixed-top nav-pills nav-fill\">\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"./index.html\"><h2>Clicky Game!</h2></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <h3>Click any image to begin!</h3>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <h2 className=\"score\">Current Score: {props.score}/12</h2>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <h2 className=\"score\">High Score: {props.highScore}/12</h2>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default NavScore;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport \"../../images.json\";\r\n\r\nfunction ImageCard(props) {\r\n    return(\r\n        <div>\r\n            <img id={props.id} src={props.image} alt={props.name} onClick={props.handleClick}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCard;\r\n","/*\nName: Clicky Game!\nDeveloped By: Sarah Kinneer\nDate: April, 2019\n*/\n\nimport React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport NavScore from \"./components/NavScore\";\nimport ImageCard from \"./components/ImageCard\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n    //Set the initial state\n    state = {\n        score: 0, //holds the current score\n        images, //the images that were imported from images.json\n        highScore: 0, //holds the high score (is not reset each round)\n        clickedImages: [] //array to hold the ids of images as they are clicked\n    };\n\n    handleClick = (event) => {\n        event.preventDefault();\n\n        /*Sidenote: I originally tried using a boolean \"clicked\" state in each child, \n        which worked nicely up until the point when the game needed to be reset to a new round... \n        I realized that the state needed to be lifted to the parent to reset.*/\n\n        //Saves the id of the clicked image\n        let clickedId = event.target.id;\n\n        //If the clicked image has not yet been clicked it will not be in the clickedImages array...\n        if (!this.state.clickedImages.includes(clickedId)) {\n            //...so push that image id into the clickedId array...\n            this.setState(prevState => ({ clickedImages: [...prevState.clickedImages, clickedId] }));\n            //...and call the updateScore function\n            this.updateScore();\n            console.log('The score now updates- Now figure out how to shuffle the cards (and save a high score if time allows)!')\n        }\n        //If the clicked image has already been clicked...\n        else if (this.state.clickedImages.includes(clickedId)) {\n            //Restart the game\n            this.resetGame();\n        } else {\n            console.log(\"Oh no! Something went wrong!\");\n        };\n    };\n\n    //Called within the handleClick function when an image is newly clicked\n    updateScore = () => {\n        //Takes the previous score from state and updates it by one and also updates the high score if this is a new high score\n        if (this.state.score >= this.state.highScore) {\n            this.setState(prevState => { return { score: prevState.score + 1, highScore: this.state.score + 1 }});\n        }\n        //If this is not a new high score, only updates the current score \n        else {\n            this.setState(prevState => { return { score: prevState.score + 1 }});\n        };\n    }\n    \n    //Resets the game to the original state EXCEPT for high score\n    resetGame = () => {\n        this.setState({ score: 0, images, clickedImages: [] });\n    }\n\n    render() {\n        //Shuffles the images array before passing it to the return for rendering on page\n        const shuffleImages = (images) => {\n            for (let i = images.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [images[i], images[j]] = [images[j], images[i]];\n            }\n            return images;\n        }\n        shuffleImages(images);\n\n        //Returns the JSX\n        return (\n            <div>\n                <NavScore score={this.state.score} highScore={this.state.highScore}></NavScore>\n                <Title></Title>\n                <Wrapper>\n                    {this.state.images.map((image, i) => (\n                        <ImageCard\n                            key={image.id}\n                            image={image.source}\n                            name={image.name}\n                            id={image.id}\n                            clicked={image.clicked}\n                            handleClick={this.handleClick}\n                            updateScore={this.updateScore}\n                            resetGame={this.resetGame}\n                        />\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}